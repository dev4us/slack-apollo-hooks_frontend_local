{"version":3,"sources":["GlobalState/reducer.js","GlobalState/store.js","LocalState/Queries.js","Components/LeftPannel.js","Components/Chats.js","Components/RightPannel.js","App.js","LocalState/resolvers.js","apollo.js","LocalState/typeDefs.js","global-styles.js","index.js"],"names":["initialState","selectedChannelId","reducer","state","action","reduced","Object","objectSpread","type","defineProperty","target","payload","Store","createContext","Consumer","CREATE_CHANNEL","gql","_templateObject","CHANNELS_QUERY","_templateObject2","GET_MESSAGES","_templateObject3","SEND_MESSAGE","_templateObject4","LeftMenuFrame","styled","div","LeftPannel_templateObject","Title","LeftPannel_templateObject2","SubTitle","LeftPannel_templateObject3","Channel","LeftPannel_templateObject4","props","isActive","css","_templateObject5","CreateChannelFrame","_templateObject6","CreateChannelInput","input","_templateObject7","CreateChannelBtn","button","_templateObject8","LeftPannel","_useContext","useContext","dispatch","data","useQuery","_useState","useState","_useState2","slicedToArray","createChannelName","setCreateChannelName","createChannel","useMutation","variables","channelName","update","proxy","mutationResult","react_default","a","createElement","Fragment","channelList","map","channel","index","key","id","onClick","placeholder","value","onChange","e","onKeyPress","onAddChannel","ChatRow","Chats_templateObject","Thumbnail","img","Chats_templateObject2","MessageFrame","Chats_templateObject3","Nickname","Chats_templateObject4","DateTime","Chats_templateObject5","ProfileFrame","Chats_templateObject6","Message","Chats_templateObject7","Chats","_ref","innerChannelId","setMessageCount","messageCount","messages","message","array","length","src","nickname","timestamp","moment","parseInt","utcOffset","format","TimeConverter","createdAt","contents","Container","RightPannel_templateObject","ChatListFrame","RightPannel_templateObject2","ChatInputFrame","RightPannel_templateObject3","InputData","RightPannel_templateObject4","inputId","RightPannel_templateObject5","RightPannel_templateObject6","SendMessage","RightPannel_templateObject7","RightPannel","faker","name","findName","setNickname","_useState3","_useState4","setMessage","_useState5","_useState6","MessageCount","inputChat","useRef","lastOfInputList","sendChat","current","focus","useEffect","scrollIntoView","behavior","console","log","Components_Chats","ref","setMessageByKey","RightPannel_SendMessage","MainFrame","App_templateObject","App","dist_default","href","size","bgColor","react_favicon_default","url","Helmet_default","Components_LeftPannel","Components_RightPannel","resolvers","Mutation","CreateChannel","_","cache","prevData","readQuery","query","__typename","concat","writeQuery","_ref2","Date","now","InMemoryCache","client","ApolloClient","link","withClientState","defaults","typeDefs","GlobalStyle","createGlobalStyle","global_styles_templateObject","reset","ReactDOM","render","children","_useReducer","useReducer","_useReducer2","store","Provider","react_apollo_browser_umd","ApolloContext","src_App","global_styles","document","getElementById"],"mappings":"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","file":"static/js/main.9302a552.chunk.js","sourcesContent":["export const initialState = {\r\n  selectedChannelId: 1\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const reduced = { ...state };\r\n\r\n  switch (action.type) {\r\n    case \"SET_VALUE\":\r\n      return {\r\n        ...reduced,\r\n        [action.target]: action.payload\r\n      };\r\n    case \"RESET_DATA\":\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport reducer, { initialState } from \"./reducer\";\r\n\r\nexport const Store = createContext();\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const store = { state, dispatch };\r\n\r\n  return <Store.Provider value={store}>{children}</Store.Provider>;\r\n};\r\n\r\nexport const GlobalConsumer = Store.Consumer;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_CHANNEL = gql`\r\n  mutation createChannel($channelName: String!) {\r\n    CreateChannel(channelName: $channelName) @client\r\n  }\r\n`;\r\n\r\nexport const CHANNELS_QUERY = gql`\r\n  {\r\n    channelList @client {\r\n      id\r\n      channelName\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_MESSAGES = gql`\r\n  query getMessage($innerChannelId: Int!) {\r\n    messages(innerChannelId: $innerChannelId) @client {\r\n      nickname\r\n      contents\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SEND_MESSAGE = gql`\r\n  mutation sendMessage(\r\n    $nickname: String!\r\n    $contents: String!\r\n    $innerChannelId: Int!\r\n  ) {\r\n    SendMessage(\r\n      nickname: $nickname\r\n      contents: $contents\r\n      innerChannelId: $innerChannelId\r\n    ) @client\r\n  }\r\n`;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Store } from \"../GlobalState/store\";\r\nimport { useQuery, useMutation } from \"react-apollo-hooks\";\r\nimport { CHANNELS_QUERY, CREATE_CHANNEL } from \"../LocalState/Queries\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst LeftMenuFrame = styled.div`\r\n  position: relative;\r\n  padding: 15px 15px 15px 15px;\r\n  width: 250px;\r\n  height: 100%;\r\n  background: #4d394b;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  font-weight: bold;\r\n  color: white;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst SubTitle = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  color: #dcdcdc;\r\n  font-size: 15px;\r\n`;\r\n\r\nconst Channel = styled.div`\r\n  width: 100%;\r\n  height: 30px;\r\n  color: #8e8d8d;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n  ${props =>\r\n    props.isActive &&\r\n    css`\r\n      color: white;\r\n      font-weight: bold;\r\n      cursor: context-menu;\r\n    `}\r\n`;\r\n\r\nconst CreateChannelFrame = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  width: 85%;\r\n  height: 35px;\r\n  bottom: 10px;\r\n`;\r\n\r\nconst CreateChannelInput = styled.input`\r\n  flex: 1;\r\n  height: 100%;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n  border: 1px solid #dcdcdc;\r\n  padding-left: 15px;\r\n`;\r\nconst CreateChannelBtn = styled.button`\r\n  width: 17%;\r\n  height: 100%;\r\n  border-top-right-radius: 5px;\r\n  border-bottom-right-radius: 5px;\r\n  border: none;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: #a9a7a7;\r\n  }\r\n`;\r\n\r\nconst LeftPannel = () => {\r\n  const { state, dispatch } = useContext(Store);\r\n  const { data } = useQuery(CHANNELS_QUERY);\r\n  const [createChannelName, setCreateChannelName] = useState(\"\");\r\n\r\n  const switchChannel = id => {\r\n    dispatch({\r\n      type: \"SET_VALUE\",\r\n      target: \"selectedChannelId\",\r\n      payload: id\r\n    });\r\n  };\r\n\r\n  const createChannel = useMutation(CREATE_CHANNEL, {\r\n    variables: {\r\n      channelName: createChannelName\r\n    },\r\n    update: (proxy, mutationResult) => {\r\n      setCreateChannelName(\"\");\r\n    }\r\n  });\r\n\r\n  const onAddChannel = e => {\r\n    if (e.key === \"Enter\") {\r\n      createChannel();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <LeftMenuFrame>\r\n        <Title>Slack-Apollo-hooks</Title>\r\n        <SubTitle>Channel</SubTitle>\r\n        {data &&\r\n          data.channelList &&\r\n          data.channelList.map((channel, index) => (\r\n            <Channel\r\n              key={index}\r\n              isActive={channel.id === state.selectedChannelId}\r\n              onClick={() => switchChannel(channel.id)}\r\n            >\r\n              # {channel.channelName}\r\n            </Channel>\r\n          ))}\r\n        <CreateChannelFrame>\r\n          <CreateChannelInput\r\n            placeholder=\"Create Channel\"\r\n            value={createChannelName}\r\n            onChange={e => setCreateChannelName(e.target.value)}\r\n            onKeyPress={e => onAddChannel(e)}\r\n          />\r\n          <CreateChannelBtn onClick={createChannel}>+</CreateChannelBtn>\r\n        </CreateChannelFrame>\r\n      </LeftMenuFrame>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LeftPannel;\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { GET_MESSAGES } from \"../LocalState/Queries\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment-timezone\";\r\n\r\nconst ChatRow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 56px;\r\n  padding-left: 15px;\r\n\r\n  &:hover {\r\n    background: #ececec;\r\n  }\r\n`;\r\n\r\nconst Thumbnail = styled.img`\r\n  margin-right: 10px;\r\n  height: 40px;\r\n`;\r\n\r\nconst MessageFrame = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Nickname = styled.div`\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst DateTime = styled.div`\r\n  font-size: 12px;\r\n  padding-top: 3px;\r\n  padding-left: 5px;\r\n`;\r\nconst ProfileFrame = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst Message = styled.a`\r\n  font-size: 14px;\r\n  margin-top: 2px;\r\n`;\r\n\r\nconst Chats = ({ innerChannelId, messageCount, setMessageCount }) => {\r\n  const { data } = useQuery(GET_MESSAGES, {\r\n    variables: { innerChannelId }\r\n  });\r\n\r\n  const TimeConverter = timestamp => {\r\n    if (!timestamp) {\r\n      return;\r\n    }\r\n    //let timestamp_date = new Date(parseInt(timestamp));\r\n    //return timestamp_date.toLocaleString();\r\n    return moment(parseInt(timestamp))\r\n      .utcOffset(360)\r\n      .format(\"YYYY-MM-DD HH:mm\");\r\n  };\r\n  return (\r\n    <div>\r\n      {data.messages &&\r\n        data.messages.map((message, index, array) => {\r\n          setMessageCount(array.length);\r\n          return (\r\n            <ChatRow key={index}>\r\n              <Thumbnail src=\"//github.com/dev4us/source_warehouse/blob/master/images/avatar.png?raw=true\" />\r\n              <MessageFrame>\r\n                <ProfileFrame>\r\n                  <Nickname>{message.nickname}</Nickname>\r\n                  <DateTime>{TimeConverter(message.createdAt)}</DateTime>\r\n                </ProfileFrame>\r\n                <Message>{message.contents}</Message>\r\n              </MessageFrame>\r\n            </ChatRow>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n","import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport { Store } from \"../GlobalState/store\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport { SEND_MESSAGE } from \"../LocalState/Queries\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nimport faker from \"faker\";\r\n\r\nimport Chats from \"./Chats\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n`;\r\n\r\nconst ChatListFrame = styled.div`\r\n  flex: 9;\r\n  overflow-y: scroll;\r\n  border-bottom: 1px solid #dcdcdc;\r\n`;\r\n\r\nconst ChatInputFrame = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding-left: 15px;\r\n  padding-right: 15px;\r\n  height: 60px;\r\n`;\r\n\r\nconst InputData = styled.input`\r\n  border: 2px solid black;\r\n  padding-left: 30px;\r\n  height: 38px;\r\n  ${props =>\r\n    props.inputId === \"nickname\" &&\r\n    css`\r\n      width: 12%;\r\n      border-right: none;\r\n      border-top-left-radius: 5px;\r\n      border-bottom-left-radius: 5px;\r\n    `}\r\n  ${props =>\r\n    props.inputId === \"chat\" &&\r\n    css`\r\n      width: 76%;\r\n    `}\r\n`;\r\nconst SendMessage = styled.button`\r\n  width: 11%;\r\n  height: 38px;\r\n  background: #4d394b;\r\n  color: white;\r\n  font-size: 12px;\r\n  border: none;\r\n  border-top-right-radius: 5px;\r\n  border-bottom-right-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst RightPannel = () => {\r\n  const { state } = useContext(Store);\r\n  const [nickname, setNickname] = useState(faker.name.findName());\r\n  const [message, setMessage] = useState(\"\");\r\n  const [MessageCount, setMessageCount] = useState(0);\r\n  const inputChat = useRef();\r\n  const lastOfInputList = useRef();\r\n\r\n  const setMessageByKey = e => {\r\n    if (e.key === \"Enter\") {\r\n      sendChat();\r\n    }\r\n  };\r\n  const sendChat = useMutation(SEND_MESSAGE, {\r\n    variables: {\r\n      nickname,\r\n      contents: message,\r\n      innerChannelId: state.selectedChannelId\r\n    },\r\n    update: (proxy, mutationResult) => {\r\n      setMessage(\"\");\r\n      inputChat.current.focus();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    lastOfInputList.current.scrollIntoView({ behavior: \"smooth\" });\r\n    console.log(\"1\");\r\n  }, [MessageCount]);\r\n\r\n  return (\r\n    <Container>\r\n      <ChatListFrame>\r\n        <Chats\r\n          innerChannelId={state.selectedChannelId}\r\n          messageCount={MessageCount}\r\n          setMessageCount={setMessageCount}\r\n        />\r\n        <div ref={lastOfInputList} />\r\n      </ChatListFrame>\r\n      <ChatInputFrame>\r\n        <InputData\r\n          inputId=\"nickname\"\r\n          placeholder=\"your nickname\"\r\n          value={nickname}\r\n          onChange={e => setNickname(e.target.value)}\r\n        />\r\n        <InputData\r\n          inputId=\"chat\"\r\n          ref={inputChat}\r\n          placeholder=\"input your message\"\r\n          value={message}\r\n          onChange={e => setMessage(e.target.value)}\r\n          onKeyPress={e => setMessageByKey(e)}\r\n        />\r\n        <SendMessage onClick={sendChat}>Send Message</SendMessage>\r\n      </ChatInputFrame>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RightPannel;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport LeftPannel from \"./Components/LeftPannel\";\r\nimport RightPannel from \"./Components/RightPannel\";\r\n\r\nimport Favicon from \"react-favicon\";\r\nimport Helmet from \"react-helmet\";\r\nimport GHCorner from \"react-gh-corner\";\r\n\r\nconst MainFrame = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n  flex-direction: row;\r\n`;\r\nconst App = () => {\r\n  return (\r\n    <MainFrame>\r\n      <GHCorner\r\n        href=\"https://github.com/dev4us/slack-apollo-hooks_frontend\"\r\n        size={80}\r\n        bgColor=\"#9f4940\"\r\n      />\r\n      <Favicon url=\"//raw.githubusercontent.com/dev4us/source_warehouse/master/images/slack.ico\" />\r\n      <Helmet>\r\n        <title>Slack witch apollo & hooks - dev4us</title>\r\n      </Helmet>\r\n      <LeftPannel />\r\n      <RightPannel />\r\n    </MainFrame>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { CHANNELS_QUERY, GET_MESSAGES } from \"./Queries\";\r\n\r\nexport const defaults = {\r\n  channelList: [\r\n    {\r\n      id: 1,\r\n      channelName: \"Public\",\r\n      __typename: \"channels\"\r\n    }\r\n  ],\r\n  messages: []\r\n};\r\n\r\nexport const resolvers = {\r\n  Mutation: {\r\n    CreateChannel: (_, variables, { cache }) => {\r\n      const prevData = cache.readQuery({ query: CHANNELS_QUERY });\r\n\r\n      const payload = {\r\n        id: prevData.channelList.length + 1,\r\n        channelName: variables.channelName,\r\n        __typename: \"channels\"\r\n      };\r\n\r\n      const data = {\r\n        channelList: prevData.channelList.concat([payload])\r\n      };\r\n\r\n      cache.writeQuery({\r\n        query: CHANNELS_QUERY,\r\n        data\r\n      });\r\n      return null;\r\n    },\r\n    SendMessage: (_, variables, { cache }) => {\r\n      const prevData = cache.readQuery({\r\n        query: GET_MESSAGES,\r\n        variables: { innerChannelId: variables.innerChannelId }\r\n      });\r\n\r\n      const payload = {\r\n        nickname: variables.nickname,\r\n        contents: variables.contents,\r\n        createdAt: Date.now(),\r\n        innerChannelId: variables.innerChannelId,\r\n        __typename: \"message\"\r\n      };\r\n\r\n      const data = {\r\n        messages: prevData.messages.concat([payload])\r\n      };\r\n\r\n      cache.writeQuery({\r\n        query: GET_MESSAGES,\r\n        variables: {\r\n          innerChannelId: variables.innerChannelId\r\n        },\r\n        data\r\n      });\r\n\r\n      return null;\r\n    }\r\n  }\r\n};\r\n","import ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { withClientState } from \"apollo-link-state\";\r\nimport { typeDefs } from \"./LocalState/typeDefs\";\r\nimport { resolvers, defaults } from \"./LocalState/resolvers\";\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nexport const client = new ApolloClient({\r\n  cache,\r\n  link: withClientState({ resolvers, defaults, cache, typeDefs })\r\n});\r\n","export const typeDefs = `\r\ntype Channel {\r\n  id: Int!\r\n  channelName: String!\r\n  messages: [Message]\r\n  createdAt: String!\r\n  updatedAt: String\r\n}\r\n\r\ntype CreateChannelResponse {\r\n  ok: Boolean!\r\n  error: String\r\n}\r\n\r\ntype Mutation {\r\n  CreateChannel(channelName: String!): CreateChannelResponse!\r\n  SendMessage(nickname: String!, contents: String!, innerChannelId: Int!): SendMessageResponse!\r\n}\r\n\r\ntype Subscription {\r\n  CreateChannelSubscription: Channel\r\n  CreateMessageSubscription: Message\r\n}\r\n\r\ntype GetChannelResponse {\r\n  ok: Boolean!\r\n  error: String\r\n  channels: [Channel]\r\n}\r\n\r\ntype Query {\r\n  GetChannel: GetChannelResponse!\r\n  GetMessage(innerChannelId: Int!): GetMessageResponse!\r\n}\r\n\r\ntype GetMessageResponse {\r\n  ok: Boolean!\r\n  error: String\r\n  messages: [Message]\r\n}\r\n\r\ntype Message {\r\n  id: Int!\r\n  nickname: String!\r\n  contents: String!\r\n  innerChannel: Channel!\r\n  innerChannelId: Int!\r\n  createdAt: String!\r\n  updatedAt: String\r\n}\r\n\r\ntype SendMessageResponse {\r\n  ok: Boolean!\r\n  error: String\r\n}\r\n`;\r\n","import reset from \"styled-reset\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\n// tslint:disable-next-line\r\nconst GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Maven+Pro');\r\n  @import url('https://fonts.googleapis.com/css?family=Noto+Sans+KR:300,400,500,700');\r\n  ${reset}\r\n  html, body, #root{\r\n    width:100%;\r\n    height:100%;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  *:focus{\r\n    outline:none;\r\n  }\r\n  body{\r\n    font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;\r\n  }\r\n  a{\r\n    color:inherit;\r\n    text-decoration:none;\r\n  }\r\n  input,\r\n  button{\r\n    &.focus,\r\n    &.active{outline:none}\r\n  }\r\n  h1,h2,h3,h4,h5,h6{\r\n    font-family:'Maven Pro', sans-serif;\r\n  }\r\n`;\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\r\nimport { GlobalProvider } from \"./GlobalState/store\";\r\n\r\nimport { client } from \"./apollo\";\r\n\r\nimport GlobalStyle from \"./global-styles\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    <GlobalProvider>\r\n      <ApolloProvider client={client}>\r\n        <ApolloHooksProvider client={client}>\r\n          <App />\r\n          <GlobalStyle />\r\n        </ApolloHooksProvider>\r\n      </ApolloProvider>\r\n    </GlobalProvider>\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}